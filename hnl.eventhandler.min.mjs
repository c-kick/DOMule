import"./hnl.polyfills.mjs";import{debounceThis}from"./hnl.debounce.mjs";import{hnlLogger}from"./hnl.logger.mjs";export const NAME="eventHandler";class eventHandler{constructor(){const EventHandler=this;this._callbacks={"docReady":{},"breakPointChange":{},"docShift":{},"startResize":{},"resize":{},"endResize":{},"bodyResize":{},"docBlur":{},"docFocus":{},"scroll":{},"startScroll":{},"endScroll":{},"docLoaded":{},"imgsLoaded":{}};this._timestamps={};this._lastRunTimeStamps={};this._allowMultiple=["breakPointChange"];
this._singleExecution=["docReady","imgsLoaded","docLoaded"];this._states={};if(document.readyState!=="loading"){hnlLogger.info(NAME,"Document is ready.");EventHandler._runListeners(["docReady","docShift"]);EventHandler._states.docReady=true}else window.addEventListener("DOMContentLoaded",function(e){hnlLogger.info(NAME,"Document is ready.");EventHandler._runListeners(["docReady","docShift"],e);EventHandler._states.docReady=true});window.addEventListener("load",function(e){hnlLogger.info(NAME,"Page is fully loaded.");
EventHandler._runListeners(["docLoaded"],e);EventHandler._states.docLoaded=true});document.addEventListener("breakPointChange",function breakPointChanged(e){if(e.detail.matches)hnlLogger.info(NAME,"Breakpoint matched: "+e.detail.name);EventHandler._runListeners(["breakPointChange"],e)});import("./hnl.breakpoints.mjs");window.addEventListener("resize",debounceThis(e=>{hnlLogger.info(NAME,"Resizing.");EventHandler._timestamps["resize"]=performance.now();EventHandler._runListeners(["resize"],e)},{execStart:true,
execWhile:true,execDone:true}));window.addEventListener("resize",debounceThis(e=>{hnlLogger.info(NAME,"Resize started.");EventHandler._timestamps["resize"]=performance.now();EventHandler._runListeners(["startResize"],e)},{execStart:true,execWhile:false,execDone:false}));window.addEventListener("resize",debounceThis(e=>{e.TimeTaken=performance.now()-EventHandler._timestamps["resize"];hnlLogger.info(NAME,"Resize ended. (took "+e.TimeTaken+"ms)");EventHandler._runListeners(["endResize","docShift"],e)},
{execStart:false,execWhile:false,execDone:true}));(new ResizeObserver(debounceThis(e=>{EventHandler._runListeners(["docShift","bodyResize"],e)},{execStart:false,execWhile:false,execDone:true,threshold:150}))).observe(document.body);window.addEventListener("scroll",debounceThis(e=>{EventHandler._timestamps["scroll"]=performance.now();EventHandler._runListeners(["startScroll"],e)},{execStart:true,execWhile:false,execDone:false}));window.addEventListener("scroll",debounceThis(e=>{EventHandler._runListeners(["scroll",
"docShift"],e)},{execStart:false,execWhile:true,execDone:false,threshold:200}));window.addEventListener("scroll",debounceThis(e=>{e.TimeTaken=performance.now()-EventHandler._timestamps["scroll"];EventHandler._runListeners(["endScroll"],e)},{execStart:false,execWhile:false,execDone:true}));(function visibilityChanged(){const docHidden=typeof document.hidden!=="undefined";const hidden=docHidden?"hidden":"msHidden";const visibilityChange=docHidden?"visibilitychange":"msvisibilitychange";let document_hidden=
document[hidden];document.addEventListener(visibilityChange,function(e){if(document_hidden!==document[hidden]){if(document[hidden]){EventHandler._timestamps["visibility"]=performance.now();EventHandler._runListeners(["docBlur"],e)}else{e.TimeTaken=performance.now()-EventHandler._timestamps["visibility"];EventHandler._runListeners(["docFocus","docShift"],e)}document_hidden=document[hidden]}})})();Promise.all(Array.from(document.images).filter(img=>!img.complete&&img.loading!=="lazy").map(img=>new Promise(resolve=>
{img.onload=img.onerror=resolve}))).then(e=>{hnlLogger.info(NAME,"All non lazy-loading images loaded.");EventHandler._runListeners(["imgsLoaded"],e);EventHandler._states.imgsLoaded=true})}_hashCode(string){let hash=0;for(let i=0;i<string.length;i++){let char=string.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash}return Math.abs(hash).toString()}_runListeners(events,origEvent){const callBacks=this._callbacks;const lastRunTimes=this._lastRunTimeStamps;const allowMultiple=this._allowMultiple;requestAnimationFrame(timeStamp=>
{events.forEach(function(event){for(let id in callBacks[event])if(callBacks[event].hasOwnProperty(id)){let cb=callBacks[event][id];if(typeof cb==="function")if(lastRunTimes[id]!==timeStamp||allowMultiple.includes(event)){lastRunTimes[id]=timeStamp;cb.call(this,origEvent)}}})})}addListener(event,callback,id=null){if(!this._callbacks[event]){hnlLogger.warn(NAME,"No such event! ("+event+")");return function(){}}else if(this._singleExecution.includes(event)&&this._states[event])callback.call(this);else{const thisID=
this._hashCode(`${callback.toString()}${id}`);if(typeof this._callbacks[event][thisID]==="function")hnlLogger.warn(NAME,`Callback '${thisID}' (${callback.name||"anonymous"}) already assigned to event '${event}', skipping...`);else this._callbacks[event][thisID]=callback}return callback}removeListener(event,callback){if(!this._callbacks[event]){hnlLogger.warn(NAME,"No such event! ("+event+")");return false}else{const id=this._hashCode(callback.toString());if(this._callbacks[event][id])delete this._callbacks[event][id]}}docLoaded(callback,
id=null){return this.addListener("docLoaded",callback,id)}docReady(callback,id=null){return this.addListener("docReady",callback,id)}docShift(callback,id=null){return this.addListener("docShift",callback,id)}breakPointChange(callback,id=null){return this.addListener("breakPointChange",callback,id)}imgsLoaded(callback,id=null){return this.addListener("imgsLoaded",callback,id)}}window.eventHandler=window.eventHandler?window.eventHandler:new eventHandler;export default window.eventHandler;
