import{debounceThis}from"./hnl.debounce.mjs";import{hnlLogger}from"./hnl.logger.mjs";const NAME="eventHandler";class eventHandler{constructor(){const EventHandler=this;this._callbacks={"docReady":{},"breakPointChange":{},"docShift":{},"startResize":{},"resize":{},"endResize":{},"bodyResize":{},"docBlur":{},"docFocus":{},"scroll":{},"startScroll":{},"endScroll":{}};this._timestamps={};if(document.readyState!=="loading"){hnlLogger.info(NAME,"Document is ready.");EventHandler._runListeners(["docReady",
"docShift"]);document.eventHandlerBusy=false}else window.addEventListener("DOMContentLoaded",function(e){hnlLogger.info(NAME,"Document is ready.");EventHandler._runListeners(["docReady","docShift"],e);document.eventHandlerBusy=false});document.addEventListener("breakPointChange",function breakPointChanged(e){if(e.detail.matches)hnlLogger.info(NAME,"Breakpoint matched: "+e.detail.name);EventHandler._runListeners(["breakPointChange"],e)});import("./hnl.breakpoints.mjs");window.addEventListener("resize",
debounceThis(e=>{hnlLogger.info(NAME,"Resize started.");EventHandler._timestamps["resize"]=Date.now();EventHandler._runListeners(["startResize","resize"],e);document.eventHandlerBusy=true},{execStart:true,execWhile:false,execDone:false}));window.addEventListener("resize",debounceThis(e=>{e.TimeTaken=Date.now()-EventHandler._timestamps["resize"];hnlLogger.info(NAME,"Resize ended. (took "+e.TimeTaken+"ms)");EventHandler._runListeners(["endResize","docShift"],e);document.eventHandlerBusy=false},{execStart:false,
execWhile:false,execDone:true}));(new ResizeObserver(debounceThis(e=>{EventHandler._runListeners(["docShift","bodyResize"],e)},{execStart:false,execWhile:false,execDone:true,threshold:150}))).observe(document.body);window.addEventListener("scroll",debounceThis(e=>{EventHandler._timestamps["scroll"]=Date.now();EventHandler._runListeners(["startScroll"],e);document.eventHandlerBusy=true},{execStart:true,execWhile:false,execDone:false}));window.addEventListener("scroll",debounceThis(e=>{EventHandler._runListeners(["scroll",
"docShift"],e)},{execStart:false,execWhile:true,execDone:false,threshold:100}));window.addEventListener("scroll",debounceThis(e=>{e.TimeTaken=Date.now()-EventHandler._timestamps["scroll"];EventHandler._runListeners(["endScroll"],e);document.eventHandlerBusy=false},{execStart:false,execWhile:false,execDone:true}));(function visibilityChanged(){let docHidden=typeof document.hidden!=="undefined";let hidden=docHidden?"hidden":"msHidden";let visibilityChange=docHidden?"visibilitychange":"msvisibilitychange";
let document_hidden=document[hidden];document.addEventListener(visibilityChange,function(e){if(document_hidden!==document[hidden]){if(document[hidden]){EventHandler._timestamps["visibility"]=Date.now();hnlLogger.info(NAME,"Document lost focus.");EventHandler._runListeners(["docBlur","docShift"],e);document.eventHandlerBusy=false}else{e.TimeTaken=Date.now()-EventHandler._timestamps["visibility"];hnlLogger.info(NAME,"Document regained focus. (took "+e.TimeTaken+"ms)");EventHandler._runListeners(["docFocus",
"docShift"],e)}document_hidden=document[hidden]}})})()}_hashCode(string){var hash=0;for(var i=0;i<string.length;i++){var char=string.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash}return Math.abs(hash).toString()}_runListeners(events,origEvent){let callBacks=this._callbacks;events.forEach(function(event){for(let id in callBacks[event])if(callBacks[event].hasOwnProperty(id)){let cb=callBacks[event][id];if(typeof cb==="function")cb.call(this,origEvent)}})}addListener(event,callback){if(!this._callbacks[event]){hnlLogger.warn(NAME,
"No such event! ("+event+")");return function(){}}else if(event==="docReady"&&document.readyState!=="loading")callback.call(this);else{if(event==="docShift"&&document.readyState!=="loading")callback.call(this);let id=this._hashCode(callback.toString());if(typeof this._callbacks[event][id]==="function"){hnlLogger.warn(NAME,"Callback already assigned to event, skipping...");hnlLogger.warn(NAME,event)}else this._callbacks[event][id]=callback}return callback}removeListener(event,callback){if(!this._callbacks[event]){hnlLogger.warn(NAME,
"No such event! ("+event+")");return false}else{let id=this._hashCode(callback.toString());if(this._callbacks[event][id])delete this._callbacks[event][id]}}docReady(callback){return this.addListener("docReady",callback)}docShift(callback){return this.addListener("docShift",callback)}breakPointChange(callback){return this.addListener("breakPointChange",callback)}}window.eventHandler=window.eventHandler?window.eventHandler:new eventHandler;export default window.eventHandler;
