export const NAME="clickHandlers";function isTouchDevice(){return"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0}export function doubleClick(target,callback,once=false){if(typeof callback==="function"&&target){const threshold=500;let lastTouchTime=0;const handler=event=>{const currentTime=(new Date).getTime();if(currentTime-lastTouchTime>threshold)lastTouchTime=currentTime;else callback.call(this,event,target)};if("onpointerup"in window)target.addEventListener("pointerup",
handler,{once:once});else if(isTouchDevice())target.addEventListener("touchstart",handler,{once:once});else target.addEventListener("click",handler,{once:once})}return clickHandlers}export function singleClick(target,callback,once=false){if(typeof callback==="function"&&target){const handler=event=>{callback.call(this,event,target)};if("onpointerup"in window)target.addEventListener("pointerup",handler,{once:once});else if(isTouchDevice())target.addEventListener("touchend",handler,{once:once});else target.addEventListener("click",
handler,{once:once})}return clickHandlers}export function addClickHandler(parentElement,className="active",onElement=".row",handleClicksOutside=true,unsetOnSecondClick=false){if(parentElement.dataset.clickhandler==="attached")return false;const effectiveParent=handleClicksOutside?document.body:parentElement;let lastActive=null;effectiveParent.addEventListener("click",e=>{const targetElement=e.target.closest(onElement);const isClickInsideTarget=targetElement&&parentElement.contains(targetElement);
if(isClickInsideTarget){if(!unsetOnSecondClick&&targetElement.classList.contains(className))return;if(lastActive&&lastActive!==targetElement)lastActive.classList.remove(className);targetElement.classList.toggle(className);lastActive=targetElement.classList.contains(className)?targetElement:null}else if(!isClickInsideTarget&&lastActive){lastActive.classList.remove(className);lastActive=null}});effectiveParent.dataset.clickhandler="attached"}const clickHandlers={doubleClick,singleClick};
