import{domScanner}from"./hnl.domscanner.mjs";import{isVisible,objForEach}from"./hnl.helpers.mjs";import{hnlLogger}from"./hnl.logger.mjs";import eventHandler from"./hnl.eventhandler.mjs";export const NAME="dynImports";const deferredModules={};const defaultPaths={};function rewritePath(uri,dynamicPaths){const params=new URLSearchParams(uri.split("?")[1]||"");let customPath=(new RegExp(/^%(.*?)%/gi)).exec(uri);if(customPath&&dynamicPaths[customPath[1]])uri=uri.replace(`${customPath[0]}/`,dynamicPaths[customPath[1]]);
else{if(typeof SITE_NONCE!=="undefined")params.append("nonce",SITE_NONCE);uri=uri.replace("./","./../")}if(window.location.search.includes("debug=true")){params.append("debug","true");params.append("random",window.crypto.randomUUID())}return uri.split("?")[0]+"?"+params.toString()}function moduleName(module,path){return typeof module.NAME!=="undefined"?module.NAME:path.split("/").splice(-1)[0].split("?").slice(0,-1)[0]}export function dynImports(paths={},callback){const dynImportPaths={...defaultPaths,
...paths};domScanner("requires",function(modules,deferredModules,totals){let c=totals;objForEach(modules,function(key,elements,index){const path=rewritePath(key,dynImportPaths);hnlLogger.info(NAME,"Importing "+path.split("?")[0]+"...");import(path).then(function(module){const name=moduleName(module,key);hnlLogger.info(name," Imported.");if(typeof module.init==="function")try{hnlLogger.info(name,` Initializing for ${elements.length} element(s).`);module.init.call(module,elements)}catch(err){hnlLogger.error(name,
err)}c--}).catch(function(error){hnlLogger.error(NAME,error);hnlLogger.error(NAME,error.message)}).finally(function(e){if(!c){hnlLogger.info(NAME,"All dynamic imports finished loading.");hnlLogger.info(NAME,{modules:{...modules},deferredModules:{...deferredModules}});if(typeof callback==="function")callback.call(this,e)}})});objForEach(deferredModules,function(key,elements,index){function watchModules(){elements.forEach(function(element){isVisible(element,function(visible){if(visible){if(deferredModules[key]){hnlLogger.info(NAME,
"Element (at least one of those requiring) is visible, loading lazy module and clearing watcher.");const path=rewritePath(key,dynImportPaths);import(path).then(function(module){const name=moduleName(module,key);hnlLogger.info(name," Imported (lazy).");if(typeof module.init==="function")try{hnlLogger.info(name,` Initializing (lazy) for ${elements.length} element(s).`);module.init.call(module,elements)}catch(err){hnlLogger.error(name,err)}delete deferredModules[key]}).catch(function(error){hnlLogger.error(NAME,
error)})}eventHandler.removeListener("docShift",watchModules)}})})}eventHandler.addListener("docShift",watchModules)})})};
